pre StartTime{
	var system = Native('java.lang.System');
	var start = system.currentTimeMillis();
	}
post EndTime{
	var end = system.currentTimeMillis();
	(end - start).println('elapsed millis: ');
	}



context ccl::Connector {
	
  constraint SourceTargetMustBeDifferentComponents {      	  	
    guard: self.source.isDefined() and self.target.isDefined()
    check: CheckConnectorSourceTarget(self)
    message: "Connectors must link different components"    
  }
  
  constraint ConnectorMustHaveSource{
  	check : CheckConnectorSource(self)
  	message: "Connector must have a Source port"
  }
  
    constraint ConnectorMustHaveTarget{
  	check: CheckConnectorTarget(self)
  	message: "Connector must have a Target port"
  }
}

context ccl::Component {


	critique ValidName {
		check: CheckNameFormatValid(self)
		message: self.name + " should start with an upper-case letter"
	}
	
	constraint NoPorts {
    	check: CheckPorts(self)
    	message: self.name + "has no Ports"
    }
    
    
    constraint UniqueName {
        check: CheckNameUnique(self)
        message: "Duplicate component name " + self.name
    }
    
    critique IsConnected {
        check: CheckingConnected(self)
        message: "Component " + self.name + " is disconnected"
    } 
	   
}

operation  CheckConnectorSourceTarget (c : Connector) : Boolean {
	(c.source.name + " != " + c.target.name).println("checking Connector source and target not same: ");
	return c.source.eContainer <> c.target.eContainer;
}

operation CheckConnectorSource (c: Connector) : Boolean {
	(c.source.name + " source " + c.source.isDefined()).println("checking Connector source: " );
	return c.source.isDefined(); 
}

operation CheckConnectorTarget (c: Connector) : Boolean {
	(c.target.name + " target " + c.target.isDefined()).println("checking Connector target: " );
	return c.target.isDefined(); 
}

operation CheckNameFormatValid (c : Component) : Boolean {
	(c.name).println("checking Component name format:" );
	return c.name = c.name.firstToUpperCase();
}

operation CheckPorts (c : Component) : Boolean {
	(c.name + " has " +  c.ports.size()+ " Ports").println("checking Component ports: ");
	return c.ports.notEmpty();
}

operation CheckNameUnique (c : Component) : Boolean {
	(c.name).println("checking Component name unique: ");
	return Component.all.select(x|x.name = c.name).size() < 2;
}

operation CheckingConnected (c : Component) : Boolean {
	(c.name).println("checking Component is connectioned: ");
	return Connector.all.exists(x|c.ports.includes(x.source)
            or c.ports.includes(x.target));
}



// Ideas for constraints:

// Indirect cycles
// Warnings about components without ports
// Warnings about unused ports