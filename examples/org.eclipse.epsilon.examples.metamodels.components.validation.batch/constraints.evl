pre StartTime{
	var system = Native('java.lang.System');
	var start = system.currentTimeMillis();
	}
post EndTime{
	var end = system.currentTimeMillis();
	(end - start).println('elapsed millis: ');
	}



context ccl::Connector {
	
  constraint SourceTargetMustBeDifferentComponents {      	  	
    guard: self.source.isDefined() and self.target.isDefined()
    check {	(self.source.name + " != " + self.target.name).println("checking Connector source and target not same: ");
			return self.source.eContainer <> self.target.eContainer;}
    message: "Connectors must link different components"    
  }
  
  constraint ConnectorMustHaveSource{
  	check {	(self.source.name + " source " + self.source.isDefined()).println("checking Connector source: " );
			return self.source.isDefined(); }
  	message: "Connector must have a Source port"
  }
  
    constraint ConnectorMustHaveTarget{
  	check {	(self.target.name + " target " + self.target.isDefined()).println("checking Connector target: " );
			return self.target.isDefined();} 
  	message: "Connector must have a Target port"
  }
}

context ccl::Component {


	critique ValidName {
	check {	(self.name).println("checking Component name format:" );
			return self.name = self.name.firstToUpperCase();}
	message: self.name + " should start with an upper-case letter"
	}
	
	constraint NoPorts {
    	check {	(self.name + " has " +  self.ports.size()+ " Ports").println("checking Component ports: ");
				return self.ports.notEmpty();}
    	message: self.name + "has no Ports"
    }
    
    
    constraint UniqueName {
        check {	(self.name).println("checking Component name unique: ");
				return Component.all.select(x|x.name = self.name).size() < 2;}
        message: "Duplicate component name " + self.name
    }
    
    critique IsConnected {
        check {	(self.name).println("checking Component is connectioned: ");
				return Connector.all.exists(x|self.ports.includes(x.source)
            		or self.ports.includes(x.target));}
        message: "Component " + self.name + " is disconnected"
    } 
	   
}




// Ideas for constraints:

// Indirect cycles
// Warnings about components without ports
// Warnings about unused ports